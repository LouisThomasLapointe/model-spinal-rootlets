#!/usr/bin/env python
#
# Generate a scatter plot for F1 or Dice score showing the inter-rater variability between the spinal cord nerve
# rootlets segmented by individual raters and the reference segmentation created using the STAPLE algorithm.
#
# Usage:
#     python 03b_generate_scatter_plot_inter_rater_variability-dice_f1.py -i /path/to/data_processed
#
# Authors: Jan Valosek
#

import os
import glob
import argparse

import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import matplotlib.patheffects as pe
import seaborn as sns

SUBJECT_TO_AXIS = {
    'sub-barcelona01': 1,
    'sub-brnoUhb03': 2,
    'sub-amu02': 3,
    'sub-007': 4,
    'sub-010': 5,
}
LEVEL_TO_AXIS = {2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7}
SUBJECT_TO_XTICKS = {
    'sub-barcelona01': 'sub-barcelona01',
    'sub-brnoUhb03': 'sub-brnoUhb03',
    'sub-amu02': 'sub-amu02',
    'sub-007': 'sub-007_ses-headNormal',
    'sub-010': 'sub-010_ses-headUp',
}
LIST_OF_RATER = ['rater1', 'rater2', 'rater3', 'rater4', 'nnunet']
LEVEL_XOFFSET = {2: -0.3, 3: -0.2, 4: -0.1, 5: 0, 6: 0.1, 7: 0.2, 8: 0.3}
RATER_COLOR = {'rater1': 'red', 'rater2': 'green', 'rater3': 'blue', 'rater4': 'orange', 'nnunet': 'black'}
RATER_MARKER = {'rater1': 's', 'rater2': 'o', 'rater3': '^', 'rater4': 'X', 'nnunet': 'D'}
SUBJECT_MARKER = {'sub-barcelona01': 's', 'sub-brnoUhb03': 'o', 'sub-amu02': '^', 'sub-007': 'X', 'sub-010': 'D'}


def get_parser():
    """
    parser function
    """

    parser = argparse.ArgumentParser(
        description='Generate scatter plot for F1 or Dice score showing the inter-rater variability between the spinal '
                    'cord nerve rootlets segmented by individual raters and the reference segmentation created using '
                    'the STAPLE algorithm.',
        prog=os.path.basename(__file__).strip('.py')
    )
    parser.add_argument(
        '-i',
        required=True,
        type=str,
        help='Path to the data_processed folder with CSV files for individual subjects and raters generated by the '
             '02b_compute_f1_and_dice.py script.'
             'The figure will be saved to the same folder.'
    )
    parser.add_argument(
        '-metric',
        required=False,
        type=str,
        help='Metric to plot. Either "f1" or "dice". Default: "f1"',
        default='dice',
        choices=['f1', 'dice']
    )

    return parser


def generate_figure(df, dir_path, metric):
    """
    Generate a figure showing the inter-rater variability for individual subjects and spinal nerve rootlets levels.
    :param df: Pandas DataFrame with the data
    :param dir_path: Path to the data_processed folder
    :param metric: Metric to plot. Either "f1" or "dice"
    :return: None
    """
    mpl.rcParams['font.family'] = 'Arial'

    fig = plt.figure(figsize=(11, 6))
    ax = fig.add_subplot()

    # Loop across subjects
    for subject in SUBJECT_TO_AXIS.keys():
        # Loop across levels
        for level in LEVEL_XOFFSET.keys():
            # Loop across raters
            for rater in LIST_OF_RATER:
                # Create scatter plot
                sns.scatterplot(
                    data=df[(df['level'] == level) & (df['rater'] == rater) & (df['subject'] == subject)],
                    x=SUBJECT_TO_AXIS[subject]+LEVEL_XOFFSET[level],
                    y=metric + '_level',
                    #hue='rater',
                    #palette=RATER_COLOR,
                    #markers=RATER_MARKER,
                    marker=RATER_MARKER[rater],
                    color=RATER_COLOR[rater],
                    ax=ax,
                    edgecolor=RATER_COLOR[rater],
                    linewidth=0.5,
                    s=50,
                    zorder=2,
                    alpha=0.5,
                    legend=True
                )

            # Insert text with level number
            ax.text(
                x=SUBJECT_TO_AXIS[subject]+LEVEL_XOFFSET[level],
                y=1.02 if metric == 'f1' else 0.92,
                s=level,
                fontsize=8,
                ha='center',
                va='center',
                zorder=3,
                color='white',
                path_effects=[pe.withStroke(linewidth=1, foreground='black')]
            )

    # Set axis labels
    ax.set_xlabel('Subject')
    ax.set_ylabel(f'{metric.capitalize()} Score')

    # Set x-axis ticklabels based on the SUBJECT_TO_AXIS dictionary
    ax.set_xticks(list(SUBJECT_TO_AXIS.values()))
    ax.set_xticklabels(list(SUBJECT_TO_XTICKS.values()))

    # Add custom legend with color and marker for each rater
    legend_elements = [
        mlines.Line2D([], [], color=RATER_COLOR[rater], marker=RATER_MARKER[rater], linestyle='None',
                      markersize=7, alpha=0.5, label=rater)
        for rater in LIST_OF_RATER
    ]
    # Place legend in left bottom corner
    ax.legend(handles=legend_elements, loc='lower left', bbox_to_anchor=(0, 0), ncol=1)

    # Add title
    ax.set_title(f'Spinal Cord Nerve Rootlets Inter-Rater Variability - {metric.capitalize()} Score', y=1.03)

    # Add horizontal grid
    ax.grid(axis='y', alpha=0.2)
    ax.set_axisbelow(True)

    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    plt.tight_layout()
    # Save the figure
    fname_figure = 'scatter_plot_' + metric + '_inter_rater_variability.png'
    fig.savefig(os.path.join(dir_path, fname_figure), dpi=300)
    print(f'Figure saved to {os.path.join(dir_path, fname_figure)}')


def generate_figure_test_dice(df, dir_path, metric):
    """
    Generate a figure showing the test Dice score for individual subjects and spinal nerve rootlets levels.
    :param df: Pandas DataFrame with the data
    :param dir_path: Path to the data_processed folder
    :param metric: Metric to plot. Either "f1" or "dice"
    :return: None
    """

    mpl.rcParams['font.family'] = 'Arial'

    fig = plt.figure(figsize=(6, 4))
    ax = fig.add_subplot()

    # Insert boxplots for each level
    sns.boxplot(
        data=df,
        x='level',
        y=metric + '_level',
        color='white',
        ax=ax,
        zorder=1,
        fliersize=0,        # Size of the markers used to indicate outlier observations
        width=0.5,
        linewidth=1,
        boxprops=dict(alpha=0.5),
        whiskerprops=dict(alpha=0.5),
        medianprops=dict(alpha=0.5),
        capprops=dict(alpha=0.5),
    )

    # Loop across subjects
    for subject in SUBJECT_TO_AXIS.keys():
        # Loop across levels
        for level in LEVEL_TO_AXIS.keys():
            # Adjust x-axis coordinate to match the boxplot
            x_coordinate = level - 2
            # Create scatter plot
            sns.scatterplot(
                data=df[(df['level'] == level) & (df['subject'] == subject)],
                x=x_coordinate,
                y=metric + '_level',
                marker=SUBJECT_MARKER[subject],
                color='black',
                ax=ax,
                linewidth=0.5,
                s=50,
                zorder=2,
                alpha=0.5,
                legend=True
            )
            # Insert text with mean and std Dice across subjects for each level
            ax.text(
                x=x_coordinate,
                y=0.92,
                s=f'{df[(df["level"] == level)]["dice_level"].mean():.2f} Â± '
                  f'{df[(df["level"] == level)]["dice_level"].std():.2f}',
                fontsize=8,
                ha='center',
                va='center',
                zorder=3,
            )

    # Include 'C' for C2-C8
    ax.set_xticklabels(['C' + str(i) for i in LEVEL_TO_AXIS.keys()])

    # Set axis labels
    ax.set_xlabel('Level')
    ax.set_ylabel(f'{metric.capitalize()} Score')

    # Add custom legend with color each subject
    legend_elements = [
        mlines.Line2D([], [], color='black', marker=SUBJECT_MARKER[subject], linestyle='None',
                      markersize=7, alpha=0.5, label=SUBJECT_TO_XTICKS[subject])
        for subject in SUBJECT_MARKER.keys()
    ]
    # Place legend in left bottom corner
    ax.legend(handles=legend_elements, loc='lower left', bbox_to_anchor=(0, 0), ncol=1)

    # Add title
    ax.set_title(f'Test {metric.capitalize()} for Nerve Rootlets Segmentation', y=1.08)

    # Add horizontal grid
    ax.grid(axis='y', alpha=0.2)
    ax.set_axisbelow(True)

    # Remove spines
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.spines['bottom'].set_visible(True)

    plt.tight_layout()
    # Save the figure
    fname_figure = 'scatter_plot_' + metric + '_test_dice.png'
    fig.savefig(os.path.join(dir_path, fname_figure), dpi=300)
    print(f'Figure saved to {os.path.join(dir_path, fname_figure)}')


def main():
    # Parse the command line arguments
    parser = get_parser()
    args = parser.parse_args()

    dir_path = os.path.abspath(args.i)

    if not os.path.isdir(dir_path):
        print(f'ERROR: {args.i} does not exist.')

    # Get all the CSV files in the directory generated by the 02b_compute_f1_and_dice.py script
    csv_files = glob.glob(os.path.join(dir_path, '**', '*f1_and_dice_scores.csv'), recursive=True)
    # if csv_files is empty, exit
    if len(csv_files) == 0:
        print(f'ERROR: No CSV files found in {dir_path}')

    # Initialize an empty list to store the parsed data
    parsed_data = []

    # Loop across CSV files and aggregate the results into pandas dataframe
    for csv_file in csv_files:
        df_file = pd.read_csv(csv_file)
        # Add column with the fname as the first column
        df_file.insert(0, 'fname', os.path.basename(csv_file))
        parsed_data.append(df_file)

    # Combine list of dataframes into one dataframe
    df = pd.concat(parsed_data)

    # Keep only levels 2 to 8
    df = df[df['level'].isin([2, 3, 4, 5, 6, 7, 8])]

    # Extract rater from the fname and add it as a column
    df['rater'] = df['fname'].apply(lambda x: x.split('_')[-5])
    # Extract subjectID from the fname and add it as a column
    df['subject'] = df['fname'].apply(lambda x: x.split('_')[0])

    # Reset the index
    df.reset_index(drop=True, inplace=True)

    # Save dataframe to CSV
    df.to_csv(os.path.join(dir_path, 'inter_rater_variability-dice.csv'), index=False)

    # Generate the inter-rater variablity figure (raters + nnunet)
    generate_figure(df, dir_path, args.metric)

    # Test Dice for nnunet only
    # Keep only fname containing 'nnunet'
    df = df[df['fname'].str.contains('nnunet')]
    generate_figure_test_dice(df, dir_path, args.metric)

    # Compute mean and std dice_level and f1_level for each spinal level across subjects
    df_mean = df[['dice_level', 'f1_level', 'level']].groupby('level').agg(['mean', 'std']).reset_index()
    df_mean.to_csv(os.path.join(dir_path, 'inter_rater_variability_mean-dice.csv'), index=False)


if __name__ == '__main__':
    main()
